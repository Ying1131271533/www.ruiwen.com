<?php

// TCP服务端
namespace app\common\command\swoole;

use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\facade\Log;

class Task extends Command
{
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setName('task');
    }

    protected function execute(Input $input, Output $output)
    {
        // 创建Server对象，监听 127.0.0.1:9501 端口
        $server = new \Swoole\Server(config('app.swoole.host'), config('app.swoole.port_tcp'));

        // 用于设置运行时的各项参数
        $server->set([
            'task_worker_num' => 4, // 设置异步任务的工作进程数量，最好是cpu核数的1-4倍
            'max_request'     => 50, // 最大请求数
        ]);

        // 此回调函数在worker进程中执行
        $server->on('Receive', [$this, 'onReceive']);

        // 处理异步任务(此回调函数在task进程中执行)
        $server->on('Task', [$this, 'onTask']);

        // 监听连接关闭事件
        $server->on('Finish', [$this, 'onFinish']);

        //启动服务器
        $server->start();
    }

    // 此回调函数在worker进程中执行
    public function onReceive($server, $fd, $reactor_id, $data)
    {
        //投递异步任务
        $task_id = $server->task($data);
        echo "Dispatch AsyncTask: id={$task_id}\n";
    }

    // 处理异步任务(此回调函数在task进程中执行)
    public function onTask($server, $fd, $reactor_id, $data)
    {
        $server->send($fd, "发送的数据: {$data}");
    }

    // 监听连接关闭事件
    public function onFinish($server, $task_id, $data)
    {
        echo "AsyncTask[{$task_id}] Finish: {$data}" . PHP_EOL;
    }

}
