<?php

// 延迟队列 - 延迟插件
namespace app\common\command;

use app\common\lib\classes\rabbitmq\RabbitMqConnection;
use PhpAmqpLib\Wire\AMQPTable;
use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\facade\Log;

class Delayed extends Command
{
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setName('delayed');
    }

    protected function execute(Input $input, Output $output)
    {
        // 连接
        $connection = RabbitMqConnection::getConnection();
        // 信息通道
        $channel = $connection->channel();

        // 延迟队列交换机
        $delayed_exchange = 'delayed_exchange';
        // 延迟队列名称
        $delayed_queue = 'delayed_queue';
        // 延迟队列路由键
        $delayed_routing_key = 'delayed_routing_key';
        
        // 声明交换机
        $channel->exchange_declare($delayed_exchange, 'x-delayed-message', false, true, false);
        // 将队列名和交换机进行绑定，并指定routing_key
        $channel->queue_bind($delayed_queue, $delayed_exchange, $delayed_routing_key);

        echo "[*] Waiting for logs. To exit press CTRL+C \n";
        // 回调
        $callback = function($msg){
            // 打印信息
            echo "延迟插件消费者: $msg->body \n";
            // 确认消息
            $msg->ack();
            // 保存日志
            Log::info(" 延迟插件消费者: " . $msg->body);
        };

        // 设置消费成功后才能进行下一个消费
        $channel->basic_qos(null, 1, null);

        // 开启消费，手动应答
        $channel->basic_consume($delayed_queue, '', false, false, false, false, $callback);

        // 监听通道消息
        while($channel->is_open()){
            $channel->wait();
        }

        // 关闭连接
        RabbitMqConnection::closeConnectionAndChannel($channel, $connection);
    }

}
